import { InputTypeEnum } from "@/components/formComponents/types/input.types";
import { SECTION_TYPE } from "@/types/mapper.types";

export const navCommonSettings = {
    heading: "Navbar Settings",
    patchJson: (originalJson: Record<string, any>, json: Record<string, any>) => {
      return {
        ...originalJson,
        [SECTION_TYPE.NAV_BAR]: {
          ...originalJson[SECTION_TYPE.NAV_BAR],
          ...json,
        },
      };
    },
    getJsonFromKey: (originalJson: Record<string, any>) => {
      return originalJson[SECTION_TYPE.NAV_BAR];
    },
    onRemove: (originalJson: Record<string, any>) => {
      return delete originalJson[SECTION_TYPE.NAV_BAR];
    },
    inputs: [
      {
        type: InputTypeEnum.TOGGLE_BUTTON_INPUT,
        flexEnd: true,
        name: "isSticky",
        header: "Is Sticky",
        subHeading: "Fix the navbar at the top",
        tag: "General",
      },
      {
        type: InputTypeEnum.COLOR_PICKET_INPUT,
        flexEnd: true,
        name: "background",
        header: "Background Color",
        subHeading: "Choose the navbar background color",
        tag: "Appearance",
      },
      {
        type: InputTypeEnum.COLOR_PICKET_INPUT,
        flexEnd: true,
        name: "headerFontColor",
        header: "Header Font Color",
        subHeading: "Select the font color for the header",
        tag: "Appearance",
      },
      {
        type: InputTypeEnum.COLOR_PICKET_INPUT,
        flexEnd: true,
        name: "linkFontColor",
        header: "Link Font Color",
        subHeading: "Pick the color for the links",
        tag: "Appearance",
      },
      {
        type: InputTypeEnum.TOGGLE_BUTTON_INPUT,
        flexEnd: true,
        name: "collapsable",
        header: "Collapsable",
        subHeading: "In Mobile view, use sidebar",
        tag: "General",
      },
      {
        type: InputTypeEnum.TEXT_INPUT,
        name: "logo",
        placeholder: "Logo URL",
        preText: "",
        postText: "",
        header: "Logo URL",
        subHeading: "Enter the URL for the logo",
        label: "",
        tag: "Logo",
        valueTransformer: (value: string) => value,
        showError: false,
        errorTextForRegex: "",
        regexMatch: null,
        required: false,
      },
      {
        type: InputTypeEnum.NUMBER_INPUT,
        name: "logoSize",
        placeholder: "Logo Size",
        preText: "",
        postText: "px",
        header: "Logo Size (px)",
        subHeading: "Specify the size of the logo in pixels",
        label: "",
        tag: "Logo",
        valueTransformer: (value: string) => value,
        showError: false,
        errorTextForRegex: "",
        regexMatch: null,
        required: false,
        maxLength: 3,
      },
      {
        type: InputTypeEnum.TOGGLE_BUTTON_INPUT,
        flexEnd: true,
        name: "logoVisibility",
        header: "Logo Visibility",
        subHeading: "Show or hide the logo",
        tag: "Logo",
      },
      {
        type: InputTypeEnum.TOGGLE_BUTTON_INPUT,
        flexEnd: true,
        name: "headerVisibility",
        header: "Header Visibility",
        subHeading: "Show or hide the header",
        tag: "General",
      },
      {
        type: InputTypeEnum.TEXT_INPUT,
        name: "brandName",
        placeholder: "Brand Name",
        preText: "",
        postText: "",
        header: "Brand Name",
        subHeading: "Enter the name of the brand",
        label: "",
        tag: "General",
        valueTransformer: (value: string) => value,
        showError: false,
        errorTextForRegex: "",
        regexMatch: null,
        required: true,
      },
      {
        type: InputTypeEnum.MULTI_TEXT_MULTI_INPUT,
        name: "navLinks",
        label: "Navigation Links",
        required: true,
        maximunFields: 10,
        structure: [
          {
            type: InputTypeEnum.TEXT_INPUT,
            name: "linkText",
            placeholder: "Link Text",
            preText: "",
            postText: "",
            header: "Link Text",
            label: "",
            valueTransformer: (value: string) => value,
            showError: false,
            errorTextForRegex: "",
            regexMatch: null,
            required: true,
          },
          {
            type: InputTypeEnum.TEXT_INPUT,
            name: "linkURL",
            placeholder: "Link URL",
            preText: "",
            postText: "",
            header: "Link URL",
            label: "",
            valueTransformer: (value: string) => value,
            showError: false,
            errorTextForRegex: "",
            regexMatch: null,
            required: true,
          },
        ],
        subHeading: "Add navigation links and their URLs",
        tag: "Links",
      },
      {
        type: InputTypeEnum.COLOR_PICKET_INPUT,
        flexEnd: true,
        name: "hoverLinkColor",
        header: "Hover Link Color",
        subHeading: "Pick the color for the links when hovered over",
        tag: "Appearance",
      }
    ],
  };