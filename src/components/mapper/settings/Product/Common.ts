import { InputTypeEnum } from "@/components/formComponents/types/input.types";
import { JSONHeaders } from "@/types/mapper.types";

export const productCommonSettings = {
  heading: "Product Settings",
  patchJson: (
    originalJson: Record<string, any>,
    json: Record<string, any>,
    index: number
  ) => {
    console.log({ json, name: "Product" });
    return {
      ...originalJson,
      [JSONHeaders.SECTIONS]: originalJson[JSONHeaders.SECTIONS].map(
        (sect: Record<string, any>, i: number) =>
          i !== index ? sect : { ...sect, config: json }
      ),
    };
  },
  getJsonFromKey: (originalJson: Record<string, any>, index: number) => {
    return originalJson[JSONHeaders.SECTIONS][index].config;
  },
  onRemove: (originalJson: Record<string, any>, index: number) => {
    return {
      ...originalJson,
      [JSONHeaders.SECTIONS]: originalJson[JSONHeaders.SECTIONS].filter(
        (_: any, i: number) => i !== index
      ),
    };
  },
  inputs: [
    {
      type: InputTypeEnum.COLOR_PICKER_INPUT,
      name: "background",
      header: "Background",
      subHeading: "Section background",
      tag: "General",
      flexEnd: true,
      required: true,
    },
    {
      type: InputTypeEnum.COLOR_PICKER_INPUT,
      name: "cardColor",
      header: "Card Color",
      subHeading: "Color of the product card",
      tag: "General",
      flexEnd: true,
      required: true,
    },
    {
      type: InputTypeEnum.COLOR_PICKER_INPUT,
      name: "textColor",
      header: "Text Color",
      subHeading: "Color of the text",
      tag: "General",
      flexEnd: true,
      required: true,
    },
    {
      type: InputTypeEnum.TOGGLE_BUTTON_INPUT,
      name: "showPrice",
      header: "Show Price",
      subHeading: "Toggle the visibility of product price",
      tag: "General",
      flexEnd: true,
      required: true,
    },
    {
      type: InputTypeEnum.TEXT_INPUT,
      name: "headingText",
      placeholder: "Heading Text",
      header: "Heading Text",
      subHeading: "Text for the heading",
      tag: "Heading",
      preText: "",
      postText: "",
      valueTransformer: (value: string) => value,
      showError: false,
      errorTextForRegex: "",
      regexMatch: null,
      required: true,
    },
    {
      type: InputTypeEnum.COLOR_PICKER_INPUT,
      name: "headingColor",
      header: "Heading Color",
      subHeading: "Color of the heading text",
      tag: "Heading",
      flexEnd: true,
      required: true,
    },
    {
      type: InputTypeEnum.DROPDOWN_INPUT,
      name: "headingPlacement",
      header: "Heading Placement",
      subHeading: "Placement of the heading",
      tag: "Heading",
      options: [
        { value: "Left", label: "Left" },
        { value: "Center", label: "Center" },
        { value: "Right", label: "Right" },
      ],
      multiSelect: false,
      preText: "",
      postText: "",
      required: true,
    },
    {
      type: InputTypeEnum.NUMBER_INPUT,
      name: "headingSize",
      placeholder: "Heading Font Size",
      header: "Heading Font Size",
      subHeading: "Font size of the heading text",
      tag: "Heading",
      preText: "",
      postText: "px",
      valueTransformer: (value: string) => value,
      showError: false,
      errorTextForRegex: "",
      regexMatch: null,
      required: true,
      maxLength: 3,
      min: 8,
      max: 72,
      step: 1,
    },
    {
      type: InputTypeEnum.TEXT_INPUT,
      name: "subHeadingText",
      placeholder: "Subheading Text",
      header: "Subheading Text",
      subHeading: "Text for the subheading",
      tag: "Subheading",
      preText: "",
      postText: "",
      valueTransformer: (value: string) => value,
      showError: false,
      errorTextForRegex: "",
      regexMatch: null,
      required: true,
    },
    {
      type: InputTypeEnum.COLOR_PICKER_INPUT,
      name: "subHeadingColor",
      header: "Subheading Color",
      subHeading: "Color of the subheading text",
      tag: "Subheading",
      flexEnd: true,
      required: true,
    },
    {
      type: InputTypeEnum.DROPDOWN_INPUT,
      name: "subHeadingPlacement",
      header: "Subheading Placement",
      subHeading: "Placement of the subheading",
      tag: "Subheading",
      options: [
        { value: "start", label: "Left" },
        { value: "center", label: "Center" },
        { value: "end", label: "Right" },
      ],
      multiSelect: false,
      preText: "",
      postText: "",
      required: true,
    },
    {
      type: InputTypeEnum.NUMBER_INPUT,
      name: "subHeadingSize",
      placeholder: "Subheading Font Size",
      header: "Subheading Font Size",
      subHeading: "Font size of the subheading text",
      tag: "Subheading",
      preText: "",
      postText: "px",
      valueTransformer: (value: string) => value,
      showError: false,
      errorTextForRegex: "",
      regexMatch: null,
      required: true,
      maxLength: 3,
      min: 8,
      max: 72,
      step: 1,
    },
    {
      type: InputTypeEnum.MULTI_TEXT_MULTI_INPUT,
      name: "products",
      label: "Products",
      required: true,
      maximunFields: 10,
      tag: "Products",
      structure: [
        {
          type: InputTypeEnum.TEXT_INPUT,
          name: "title",
          placeholder: "Product Title",
          header: "Product Title",
          subHeading: "Enter the title for the product",
          tag: "Products",
          preText: "",
          postText: "",
          valueTransformer: (value: string) => value,
          showError: false,
          errorTextForRegex: "",
          regexMatch: null,
          required: true,
        },
        {
          type: InputTypeEnum.TEXT_INPUT,
          name: "description",
          placeholder: "Product Description",
          header: "Product Description",
          subHeading: "Enter the description for the product",
          tag: "Products",
          preText: "",
          postText: "",
          valueTransformer: (value: string) => value,
          showError: false,
          errorTextForRegex: "",
          regexMatch: null,
          required: true,
        },
        {
          type: InputTypeEnum.TEXT_INPUT,
          name: "price",
          placeholder: "Product Price",
          header: "Product Price",
          subHeading: "Enter the price for the product",
          tag: "Products",
          preText: "",
          postText: "",
          valueTransformer: (value: string) => value,
          showError: false,
          errorTextForRegex: "",
          regexMatch: null,
          required: true,
        },
        {
          type: InputTypeEnum.TEXT_INPUT,
          name: "redirection",
          placeholder: "Redirection URL",
          header: "Redirection URL",
          subHeading:
            "Enter the URL to redirect to when the product is clicked",
          tag: "Products",
          preText: "",
          postText: "",
          valueTransformer: (value: string) => value,
          showError: false,
          errorTextForRegex: "",
          regexMatch: null,
          required: true,
        },
        {
          type: InputTypeEnum.MULTI_TEXT_INPUT,
          name: "src",
          placeholder: "Image Source URLs",
          label: "Image Source URLs",
          valueTransformer: (value: string) => value,
          showError: false,
          errorTextForRegex: "",
          regexMatch: null,
          required: true,
          maximunFields: 5,
          tag: "Products",
          preText: "",
          postText: "",
          subHeading: "Add custom CSS classes for additional styling",
        },
        {
          type: InputTypeEnum.COLOR_PICKER_INPUT,
          name: "background",
          header: "Product Background",
          subHeading: "Background color of the product",
          tag: "Products",
          flexEnd: true,
          required: true,
        },
      ],
    },
  ],
};
